# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.13.4+Branch.tags-2019.13.4.Sha.0d7b19b0ef3b9f74ec58e5c86ae6af95165ef70e
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ServerConfigurationSettingsResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_set': 'str',
        'configuration_values': 'list[ServerConfigurationValueResource]'
    }

    attribute_map = {
        'configuration_set': 'ConfigurationSet',
        'configuration_values': 'ConfigurationValues'
    }

    def __init__(self, configuration_set=None, configuration_values=None):  # noqa: E501
        """ServerConfigurationSettingsResource - a model defined in Swagger"""  # noqa: E501
        self._configuration_set = None
        self._configuration_values = None
        self.discriminator = None
        if configuration_set is not None:
            self.configuration_set = configuration_set
        if configuration_values is not None:
            self.configuration_values = configuration_values

    @property
    def configuration_set(self):
        """Gets the configuration_set of this ServerConfigurationSettingsResource.  # noqa: E501


        :return: The configuration_set of this ServerConfigurationSettingsResource.  # noqa: E501
        :rtype: str
        """
        return self._configuration_set

    @configuration_set.setter
    def configuration_set(self, configuration_set):
        """Sets the configuration_set of this ServerConfigurationSettingsResource.


        :param configuration_set: The configuration_set of this ServerConfigurationSettingsResource.  # noqa: E501
        :type: str
        """

        self._configuration_set = configuration_set

    @property
    def configuration_values(self):
        """Gets the configuration_values of this ServerConfigurationSettingsResource.  # noqa: E501


        :return: The configuration_values of this ServerConfigurationSettingsResource.  # noqa: E501
        :rtype: list[ServerConfigurationValueResource]
        """
        return self._configuration_values

    @configuration_values.setter
    def configuration_values(self, configuration_values):
        """Sets the configuration_values of this ServerConfigurationSettingsResource.


        :param configuration_values: The configuration_values of this ServerConfigurationSettingsResource.  # noqa: E501
        :type: list[ServerConfigurationValueResource]
        """

        self._configuration_values = configuration_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerConfigurationSettingsResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerConfigurationSettingsResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
