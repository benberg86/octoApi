# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.13.4+Branch.tags-2019.13.4.Sha.0d7b19b0ef3b9f74ec58e5c86ae6af95165ef70e
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class LicenseStatusResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'is_compliant': 'bool',
        'hosting_environment': 'str',
        'compliance_summary': 'str',
        'effective_expiry_date': 'date',
        'days_to_effective_expiry_date': 'int',
        'messages': 'list[LicenseMessageResource]',
        'limits': 'list[LicenseLimitStatusResource]',
        'effective_node_task_limit': 'int',
        'effective_cluster_task_limit': 'int',
        'is_node_task_limit_controlled_by_license': 'bool',
        'is_cluster_task_limit_controlled_by_license': 'bool',
        'permissions_mode': 'str',
        'does_expiry_block_key_activities': 'bool',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'is_compliant': 'IsCompliant',
        'hosting_environment': 'HostingEnvironment',
        'compliance_summary': 'ComplianceSummary',
        'effective_expiry_date': 'EffectiveExpiryDate',
        'days_to_effective_expiry_date': 'DaysToEffectiveExpiryDate',
        'messages': 'Messages',
        'limits': 'Limits',
        'effective_node_task_limit': 'EffectiveNodeTaskLimit',
        'effective_cluster_task_limit': 'EffectiveClusterTaskLimit',
        'is_node_task_limit_controlled_by_license': 'IsNodeTaskLimitControlledByLicense',
        'is_cluster_task_limit_controlled_by_license': 'IsClusterTaskLimitControlledByLicense',
        'permissions_mode': 'PermissionsMode',
        'does_expiry_block_key_activities': 'DoesExpiryBlockKeyActivities',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, is_compliant=None, hosting_environment=None, compliance_summary=None, effective_expiry_date=None, days_to_effective_expiry_date=None, messages=None, limits=None, effective_node_task_limit=None, effective_cluster_task_limit=None, is_node_task_limit_controlled_by_license=None, is_cluster_task_limit_controlled_by_license=None, permissions_mode=None, does_expiry_block_key_activities=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """LicenseStatusResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._is_compliant = None
        self._hosting_environment = None
        self._compliance_summary = None
        self._effective_expiry_date = None
        self._days_to_effective_expiry_date = None
        self._messages = None
        self._limits = None
        self._effective_node_task_limit = None
        self._effective_cluster_task_limit = None
        self._is_node_task_limit_controlled_by_license = None
        self._is_cluster_task_limit_controlled_by_license = None
        self._permissions_mode = None
        self._does_expiry_block_key_activities = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if is_compliant is not None:
            self.is_compliant = is_compliant
        if hosting_environment is not None:
            self.hosting_environment = hosting_environment
        if compliance_summary is not None:
            self.compliance_summary = compliance_summary
        if effective_expiry_date is not None:
            self.effective_expiry_date = effective_expiry_date
        if days_to_effective_expiry_date is not None:
            self.days_to_effective_expiry_date = days_to_effective_expiry_date
        if messages is not None:
            self.messages = messages
        if limits is not None:
            self.limits = limits
        if effective_node_task_limit is not None:
            self.effective_node_task_limit = effective_node_task_limit
        if effective_cluster_task_limit is not None:
            self.effective_cluster_task_limit = effective_cluster_task_limit
        if is_node_task_limit_controlled_by_license is not None:
            self.is_node_task_limit_controlled_by_license = is_node_task_limit_controlled_by_license
        if is_cluster_task_limit_controlled_by_license is not None:
            self.is_cluster_task_limit_controlled_by_license = is_cluster_task_limit_controlled_by_license
        if permissions_mode is not None:
            self.permissions_mode = permissions_mode
        if does_expiry_block_key_activities is not None:
            self.does_expiry_block_key_activities = does_expiry_block_key_activities
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this LicenseStatusResource.  # noqa: E501


        :return: The id of this LicenseStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LicenseStatusResource.


        :param id: The id of this LicenseStatusResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_compliant(self):
        """Gets the is_compliant of this LicenseStatusResource.  # noqa: E501


        :return: The is_compliant of this LicenseStatusResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_compliant

    @is_compliant.setter
    def is_compliant(self, is_compliant):
        """Sets the is_compliant of this LicenseStatusResource.


        :param is_compliant: The is_compliant of this LicenseStatusResource.  # noqa: E501
        :type: bool
        """

        self._is_compliant = is_compliant

    @property
    def hosting_environment(self):
        """Gets the hosting_environment of this LicenseStatusResource.  # noqa: E501


        :return: The hosting_environment of this LicenseStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._hosting_environment

    @hosting_environment.setter
    def hosting_environment(self, hosting_environment):
        """Sets the hosting_environment of this LicenseStatusResource.


        :param hosting_environment: The hosting_environment of this LicenseStatusResource.  # noqa: E501
        :type: str
        """

        self._hosting_environment = hosting_environment

    @property
    def compliance_summary(self):
        """Gets the compliance_summary of this LicenseStatusResource.  # noqa: E501


        :return: The compliance_summary of this LicenseStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._compliance_summary

    @compliance_summary.setter
    def compliance_summary(self, compliance_summary):
        """Sets the compliance_summary of this LicenseStatusResource.


        :param compliance_summary: The compliance_summary of this LicenseStatusResource.  # noqa: E501
        :type: str
        """

        self._compliance_summary = compliance_summary

    @property
    def effective_expiry_date(self):
        """Gets the effective_expiry_date of this LicenseStatusResource.  # noqa: E501


        :return: The effective_expiry_date of this LicenseStatusResource.  # noqa: E501
        :rtype: date
        """
        return self._effective_expiry_date

    @effective_expiry_date.setter
    def effective_expiry_date(self, effective_expiry_date):
        """Sets the effective_expiry_date of this LicenseStatusResource.


        :param effective_expiry_date: The effective_expiry_date of this LicenseStatusResource.  # noqa: E501
        :type: date
        """

        self._effective_expiry_date = effective_expiry_date

    @property
    def days_to_effective_expiry_date(self):
        """Gets the days_to_effective_expiry_date of this LicenseStatusResource.  # noqa: E501


        :return: The days_to_effective_expiry_date of this LicenseStatusResource.  # noqa: E501
        :rtype: int
        """
        return self._days_to_effective_expiry_date

    @days_to_effective_expiry_date.setter
    def days_to_effective_expiry_date(self, days_to_effective_expiry_date):
        """Sets the days_to_effective_expiry_date of this LicenseStatusResource.


        :param days_to_effective_expiry_date: The days_to_effective_expiry_date of this LicenseStatusResource.  # noqa: E501
        :type: int
        """

        self._days_to_effective_expiry_date = days_to_effective_expiry_date

    @property
    def messages(self):
        """Gets the messages of this LicenseStatusResource.  # noqa: E501


        :return: The messages of this LicenseStatusResource.  # noqa: E501
        :rtype: list[LicenseMessageResource]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this LicenseStatusResource.


        :param messages: The messages of this LicenseStatusResource.  # noqa: E501
        :type: list[LicenseMessageResource]
        """

        self._messages = messages

    @property
    def limits(self):
        """Gets the limits of this LicenseStatusResource.  # noqa: E501


        :return: The limits of this LicenseStatusResource.  # noqa: E501
        :rtype: list[LicenseLimitStatusResource]
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this LicenseStatusResource.


        :param limits: The limits of this LicenseStatusResource.  # noqa: E501
        :type: list[LicenseLimitStatusResource]
        """

        self._limits = limits

    @property
    def effective_node_task_limit(self):
        """Gets the effective_node_task_limit of this LicenseStatusResource.  # noqa: E501


        :return: The effective_node_task_limit of this LicenseStatusResource.  # noqa: E501
        :rtype: int
        """
        return self._effective_node_task_limit

    @effective_node_task_limit.setter
    def effective_node_task_limit(self, effective_node_task_limit):
        """Sets the effective_node_task_limit of this LicenseStatusResource.


        :param effective_node_task_limit: The effective_node_task_limit of this LicenseStatusResource.  # noqa: E501
        :type: int
        """

        self._effective_node_task_limit = effective_node_task_limit

    @property
    def effective_cluster_task_limit(self):
        """Gets the effective_cluster_task_limit of this LicenseStatusResource.  # noqa: E501


        :return: The effective_cluster_task_limit of this LicenseStatusResource.  # noqa: E501
        :rtype: int
        """
        return self._effective_cluster_task_limit

    @effective_cluster_task_limit.setter
    def effective_cluster_task_limit(self, effective_cluster_task_limit):
        """Sets the effective_cluster_task_limit of this LicenseStatusResource.


        :param effective_cluster_task_limit: The effective_cluster_task_limit of this LicenseStatusResource.  # noqa: E501
        :type: int
        """

        self._effective_cluster_task_limit = effective_cluster_task_limit

    @property
    def is_node_task_limit_controlled_by_license(self):
        """Gets the is_node_task_limit_controlled_by_license of this LicenseStatusResource.  # noqa: E501


        :return: The is_node_task_limit_controlled_by_license of this LicenseStatusResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_node_task_limit_controlled_by_license

    @is_node_task_limit_controlled_by_license.setter
    def is_node_task_limit_controlled_by_license(self, is_node_task_limit_controlled_by_license):
        """Sets the is_node_task_limit_controlled_by_license of this LicenseStatusResource.


        :param is_node_task_limit_controlled_by_license: The is_node_task_limit_controlled_by_license of this LicenseStatusResource.  # noqa: E501
        :type: bool
        """

        self._is_node_task_limit_controlled_by_license = is_node_task_limit_controlled_by_license

    @property
    def is_cluster_task_limit_controlled_by_license(self):
        """Gets the is_cluster_task_limit_controlled_by_license of this LicenseStatusResource.  # noqa: E501


        :return: The is_cluster_task_limit_controlled_by_license of this LicenseStatusResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_cluster_task_limit_controlled_by_license

    @is_cluster_task_limit_controlled_by_license.setter
    def is_cluster_task_limit_controlled_by_license(self, is_cluster_task_limit_controlled_by_license):
        """Sets the is_cluster_task_limit_controlled_by_license of this LicenseStatusResource.


        :param is_cluster_task_limit_controlled_by_license: The is_cluster_task_limit_controlled_by_license of this LicenseStatusResource.  # noqa: E501
        :type: bool
        """

        self._is_cluster_task_limit_controlled_by_license = is_cluster_task_limit_controlled_by_license

    @property
    def permissions_mode(self):
        """Gets the permissions_mode of this LicenseStatusResource.  # noqa: E501


        :return: The permissions_mode of this LicenseStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._permissions_mode

    @permissions_mode.setter
    def permissions_mode(self, permissions_mode):
        """Sets the permissions_mode of this LicenseStatusResource.


        :param permissions_mode: The permissions_mode of this LicenseStatusResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unspecified", "Restricted", "Full"]  # noqa: E501
        if permissions_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(permissions_mode, allowed_values)
            )

        self._permissions_mode = permissions_mode

    @property
    def does_expiry_block_key_activities(self):
        """Gets the does_expiry_block_key_activities of this LicenseStatusResource.  # noqa: E501


        :return: The does_expiry_block_key_activities of this LicenseStatusResource.  # noqa: E501
        :rtype: bool
        """
        return self._does_expiry_block_key_activities

    @does_expiry_block_key_activities.setter
    def does_expiry_block_key_activities(self, does_expiry_block_key_activities):
        """Sets the does_expiry_block_key_activities of this LicenseStatusResource.


        :param does_expiry_block_key_activities: The does_expiry_block_key_activities of this LicenseStatusResource.  # noqa: E501
        :type: bool
        """

        self._does_expiry_block_key_activities = does_expiry_block_key_activities

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this LicenseStatusResource.  # noqa: E501


        :return: The last_modified_on of this LicenseStatusResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this LicenseStatusResource.


        :param last_modified_on: The last_modified_on of this LicenseStatusResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this LicenseStatusResource.  # noqa: E501


        :return: The last_modified_by of this LicenseStatusResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this LicenseStatusResource.


        :param last_modified_by: The last_modified_by of this LicenseStatusResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this LicenseStatusResource.  # noqa: E501


        :return: The links of this LicenseStatusResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LicenseStatusResource.


        :param links: The links of this LicenseStatusResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseStatusResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseStatusResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
