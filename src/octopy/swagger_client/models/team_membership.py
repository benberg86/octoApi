# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.13.4+Branch.tags-2019.13.4.Sha.0d7b19b0ef3b9f74ec58e5c86ae6af95165ef70e
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TeamMembership(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'team_id': 'str',
        'team_name': 'str',
        'is_directly_assigned': 'bool',
        'external_security_groups': 'list[NamedReferenceItem]',
        'space_id': 'str'
    }

    attribute_map = {
        'user_id': 'UserId',
        'team_id': 'TeamId',
        'team_name': 'TeamName',
        'is_directly_assigned': 'IsDirectlyAssigned',
        'external_security_groups': 'ExternalSecurityGroups',
        'space_id': 'SpaceId'
    }

    def __init__(self, user_id=None, team_id=None, team_name=None, is_directly_assigned=None, external_security_groups=None, space_id=None):  # noqa: E501
        """TeamMembership - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._team_id = None
        self._team_name = None
        self._is_directly_assigned = None
        self._external_security_groups = None
        self._space_id = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if team_id is not None:
            self.team_id = team_id
        if team_name is not None:
            self.team_name = team_name
        if is_directly_assigned is not None:
            self.is_directly_assigned = is_directly_assigned
        if external_security_groups is not None:
            self.external_security_groups = external_security_groups
        if space_id is not None:
            self.space_id = space_id

    @property
    def user_id(self):
        """Gets the user_id of this TeamMembership.  # noqa: E501


        :return: The user_id of this TeamMembership.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TeamMembership.


        :param user_id: The user_id of this TeamMembership.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def team_id(self):
        """Gets the team_id of this TeamMembership.  # noqa: E501


        :return: The team_id of this TeamMembership.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this TeamMembership.


        :param team_id: The team_id of this TeamMembership.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def team_name(self):
        """Gets the team_name of this TeamMembership.  # noqa: E501


        :return: The team_name of this TeamMembership.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this TeamMembership.


        :param team_name: The team_name of this TeamMembership.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def is_directly_assigned(self):
        """Gets the is_directly_assigned of this TeamMembership.  # noqa: E501


        :return: The is_directly_assigned of this TeamMembership.  # noqa: E501
        :rtype: bool
        """
        return self._is_directly_assigned

    @is_directly_assigned.setter
    def is_directly_assigned(self, is_directly_assigned):
        """Sets the is_directly_assigned of this TeamMembership.


        :param is_directly_assigned: The is_directly_assigned of this TeamMembership.  # noqa: E501
        :type: bool
        """

        self._is_directly_assigned = is_directly_assigned

    @property
    def external_security_groups(self):
        """Gets the external_security_groups of this TeamMembership.  # noqa: E501


        :return: The external_security_groups of this TeamMembership.  # noqa: E501
        :rtype: list[NamedReferenceItem]
        """
        return self._external_security_groups

    @external_security_groups.setter
    def external_security_groups(self, external_security_groups):
        """Sets the external_security_groups of this TeamMembership.


        :param external_security_groups: The external_security_groups of this TeamMembership.  # noqa: E501
        :type: list[NamedReferenceItem]
        """

        self._external_security_groups = external_security_groups

    @property
    def space_id(self):
        """Gets the space_id of this TeamMembership.  # noqa: E501


        :return: The space_id of this TeamMembership.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this TeamMembership.


        :param space_id: The space_id of this TeamMembership.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamMembership, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamMembership):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
