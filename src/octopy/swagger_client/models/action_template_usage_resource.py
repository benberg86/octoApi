# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.13.4+Branch.tags-2019.13.4.Sha.0d7b19b0ef3b9f74ec58e5c86ae6af95165ef70e
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class ActionTemplateUsageResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'action_template_id': 'str',
        'runbook_id': 'str',
        'process_type': 'str',
        'process_id': 'str',
        'action_id': 'str',
        'action_name': 'str',
        'runbook_name': 'str',
        'step_id': 'str',
        'step_name': 'str',
        'project_id': 'str',
        'project_name': 'str',
        'project_slug': 'str',
        'version': 'str',
        'deployment_process_id': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'action_template_id': 'ActionTemplateId',
        'runbook_id': 'RunbookId',
        'process_type': 'ProcessType',
        'process_id': 'ProcessId',
        'action_id': 'ActionId',
        'action_name': 'ActionName',
        'runbook_name': 'RunbookName',
        'step_id': 'StepId',
        'step_name': 'StepName',
        'project_id': 'ProjectId',
        'project_name': 'ProjectName',
        'project_slug': 'ProjectSlug',
        'version': 'Version',
        'deployment_process_id': 'DeploymentProcessId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, action_template_id=None, runbook_id=None, process_type=None, process_id=None, action_id=None, action_name=None, runbook_name=None, step_id=None, step_name=None, project_id=None, project_name=None, project_slug=None, version=None, deployment_process_id=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """ActionTemplateUsageResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._action_template_id = None
        self._runbook_id = None
        self._process_type = None
        self._process_id = None
        self._action_id = None
        self._action_name = None
        self._runbook_name = None
        self._step_id = None
        self._step_name = None
        self._project_id = None
        self._project_name = None
        self._project_slug = None
        self._version = None
        self._deployment_process_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if action_template_id is not None:
            self.action_template_id = action_template_id
        if runbook_id is not None:
            self.runbook_id = runbook_id
        if process_type is not None:
            self.process_type = process_type
        if process_id is not None:
            self.process_id = process_id
        if action_id is not None:
            self.action_id = action_id
        if action_name is not None:
            self.action_name = action_name
        if runbook_name is not None:
            self.runbook_name = runbook_name
        if step_id is not None:
            self.step_id = step_id
        if step_name is not None:
            self.step_name = step_name
        if project_id is not None:
            self.project_id = project_id
        if project_name is not None:
            self.project_name = project_name
        if project_slug is not None:
            self.project_slug = project_slug
        if version is not None:
            self.version = version
        if deployment_process_id is not None:
            self.deployment_process_id = deployment_process_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ActionTemplateUsageResource.


        :param id: The id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def action_template_id(self):
        """Gets the action_template_id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The action_template_id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._action_template_id

    @action_template_id.setter
    def action_template_id(self, action_template_id):
        """Sets the action_template_id of this ActionTemplateUsageResource.


        :param action_template_id: The action_template_id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._action_template_id = action_template_id

    @property
    def runbook_id(self):
        """Gets the runbook_id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The runbook_id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._runbook_id

    @runbook_id.setter
    def runbook_id(self, runbook_id):
        """Sets the runbook_id of this ActionTemplateUsageResource.


        :param runbook_id: The runbook_id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._runbook_id = runbook_id

    @property
    def process_type(self):
        """Gets the process_type of this ActionTemplateUsageResource.  # noqa: E501


        :return: The process_type of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this ActionTemplateUsageResource.


        :param process_type: The process_type of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["Deployment", "Runbook"]  # noqa: E501
        if process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(process_type, allowed_values)
            )

        self._process_type = process_type

    @property
    def process_id(self):
        """Gets the process_id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The process_id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this ActionTemplateUsageResource.


        :param process_id: The process_id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._process_id = process_id

    @property
    def action_id(self):
        """Gets the action_id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The action_id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._action_id

    @action_id.setter
    def action_id(self, action_id):
        """Sets the action_id of this ActionTemplateUsageResource.


        :param action_id: The action_id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._action_id = action_id

    @property
    def action_name(self):
        """Gets the action_name of this ActionTemplateUsageResource.  # noqa: E501


        :return: The action_name of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._action_name

    @action_name.setter
    def action_name(self, action_name):
        """Sets the action_name of this ActionTemplateUsageResource.


        :param action_name: The action_name of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._action_name = action_name

    @property
    def runbook_name(self):
        """Gets the runbook_name of this ActionTemplateUsageResource.  # noqa: E501


        :return: The runbook_name of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._runbook_name

    @runbook_name.setter
    def runbook_name(self, runbook_name):
        """Sets the runbook_name of this ActionTemplateUsageResource.


        :param runbook_name: The runbook_name of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._runbook_name = runbook_name

    @property
    def step_id(self):
        """Gets the step_id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The step_id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._step_id

    @step_id.setter
    def step_id(self, step_id):
        """Sets the step_id of this ActionTemplateUsageResource.


        :param step_id: The step_id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._step_id = step_id

    @property
    def step_name(self):
        """Gets the step_name of this ActionTemplateUsageResource.  # noqa: E501


        :return: The step_name of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._step_name

    @step_name.setter
    def step_name(self, step_name):
        """Sets the step_name of this ActionTemplateUsageResource.


        :param step_name: The step_name of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._step_name = step_name

    @property
    def project_id(self):
        """Gets the project_id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The project_id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this ActionTemplateUsageResource.


        :param project_id: The project_id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """Gets the project_name of this ActionTemplateUsageResource.  # noqa: E501


        :return: The project_name of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """Sets the project_name of this ActionTemplateUsageResource.


        :param project_name: The project_name of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._project_name = project_name

    @property
    def project_slug(self):
        """Gets the project_slug of this ActionTemplateUsageResource.  # noqa: E501


        :return: The project_slug of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._project_slug

    @project_slug.setter
    def project_slug(self, project_slug):
        """Sets the project_slug of this ActionTemplateUsageResource.


        :param project_slug: The project_slug of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._project_slug = project_slug

    @property
    def version(self):
        """Gets the version of this ActionTemplateUsageResource.  # noqa: E501


        :return: The version of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ActionTemplateUsageResource.


        :param version: The version of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def deployment_process_id(self):
        """Gets the deployment_process_id of this ActionTemplateUsageResource.  # noqa: E501


        :return: The deployment_process_id of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._deployment_process_id

    @deployment_process_id.setter
    def deployment_process_id(self, deployment_process_id):
        """Sets the deployment_process_id of this ActionTemplateUsageResource.


        :param deployment_process_id: The deployment_process_id of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._deployment_process_id = deployment_process_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this ActionTemplateUsageResource.  # noqa: E501


        :return: The last_modified_on of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this ActionTemplateUsageResource.


        :param last_modified_on: The last_modified_on of this ActionTemplateUsageResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this ActionTemplateUsageResource.  # noqa: E501


        :return: The last_modified_by of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this ActionTemplateUsageResource.


        :param last_modified_by: The last_modified_by of this ActionTemplateUsageResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this ActionTemplateUsageResource.  # noqa: E501


        :return: The links of this ActionTemplateUsageResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ActionTemplateUsageResource.


        :param links: The links of this ActionTemplateUsageResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActionTemplateUsageResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActionTemplateUsageResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
