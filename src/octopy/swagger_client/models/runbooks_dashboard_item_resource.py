# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.13.4+Branch.tags-2019.13.4.Sha.0d7b19b0ef3b9f74ec58e5c86ae6af95165ef70e
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunbooksDashboardItemResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'project_id': 'str',
        'environment_id': 'str',
        'runbook_snapshot_id': 'str',
        'runbook_snapshot_name': 'str',
        'runbook_snapshot_notes': 'str',
        'run_by': 'str',
        'runbook_id': 'str',
        'task_id': 'str',
        'tenant_id': 'str',
        'created': 'datetime',
        'queue_time': 'datetime',
        'start_time': 'datetime',
        'completed_time': 'datetime',
        'state': 'str',
        'has_pending_interruptions': 'bool',
        'has_warnings_or_errors': 'bool',
        'error_message': 'str',
        'duration': 'str',
        'is_completed': 'bool',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'project_id': 'ProjectId',
        'environment_id': 'EnvironmentId',
        'runbook_snapshot_id': 'RunbookSnapshotId',
        'runbook_snapshot_name': 'RunbookSnapshotName',
        'runbook_snapshot_notes': 'RunbookSnapshotNotes',
        'run_by': 'RunBy',
        'runbook_id': 'RunbookId',
        'task_id': 'TaskId',
        'tenant_id': 'TenantId',
        'created': 'Created',
        'queue_time': 'QueueTime',
        'start_time': 'StartTime',
        'completed_time': 'CompletedTime',
        'state': 'State',
        'has_pending_interruptions': 'HasPendingInterruptions',
        'has_warnings_or_errors': 'HasWarningsOrErrors',
        'error_message': 'ErrorMessage',
        'duration': 'Duration',
        'is_completed': 'IsCompleted',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, project_id=None, environment_id=None, runbook_snapshot_id=None, runbook_snapshot_name=None, runbook_snapshot_notes=None, run_by=None, runbook_id=None, task_id=None, tenant_id=None, created=None, queue_time=None, start_time=None, completed_time=None, state=None, has_pending_interruptions=None, has_warnings_or_errors=None, error_message=None, duration=None, is_completed=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """RunbooksDashboardItemResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._project_id = None
        self._environment_id = None
        self._runbook_snapshot_id = None
        self._runbook_snapshot_name = None
        self._runbook_snapshot_notes = None
        self._run_by = None
        self._runbook_id = None
        self._task_id = None
        self._tenant_id = None
        self._created = None
        self._queue_time = None
        self._start_time = None
        self._completed_time = None
        self._state = None
        self._has_pending_interruptions = None
        self._has_warnings_or_errors = None
        self._error_message = None
        self._duration = None
        self._is_completed = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if project_id is not None:
            self.project_id = project_id
        if environment_id is not None:
            self.environment_id = environment_id
        if runbook_snapshot_id is not None:
            self.runbook_snapshot_id = runbook_snapshot_id
        if runbook_snapshot_name is not None:
            self.runbook_snapshot_name = runbook_snapshot_name
        if runbook_snapshot_notes is not None:
            self.runbook_snapshot_notes = runbook_snapshot_notes
        if run_by is not None:
            self.run_by = run_by
        if runbook_id is not None:
            self.runbook_id = runbook_id
        if task_id is not None:
            self.task_id = task_id
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if created is not None:
            self.created = created
        if queue_time is not None:
            self.queue_time = queue_time
        if start_time is not None:
            self.start_time = start_time
        if completed_time is not None:
            self.completed_time = completed_time
        if state is not None:
            self.state = state
        if has_pending_interruptions is not None:
            self.has_pending_interruptions = has_pending_interruptions
        if has_warnings_or_errors is not None:
            self.has_warnings_or_errors = has_warnings_or_errors
        if error_message is not None:
            self.error_message = error_message
        if duration is not None:
            self.duration = duration
        if is_completed is not None:
            self.is_completed = is_completed
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The id of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunbooksDashboardItemResource.


        :param id: The id of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project_id(self):
        """Gets the project_id of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The project_id of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RunbooksDashboardItemResource.


        :param project_id: The project_id of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def environment_id(self):
        """Gets the environment_id of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The environment_id of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """Sets the environment_id of this RunbooksDashboardItemResource.


        :param environment_id: The environment_id of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._environment_id = environment_id

    @property
    def runbook_snapshot_id(self):
        """Gets the runbook_snapshot_id of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The runbook_snapshot_id of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._runbook_snapshot_id

    @runbook_snapshot_id.setter
    def runbook_snapshot_id(self, runbook_snapshot_id):
        """Sets the runbook_snapshot_id of this RunbooksDashboardItemResource.


        :param runbook_snapshot_id: The runbook_snapshot_id of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._runbook_snapshot_id = runbook_snapshot_id

    @property
    def runbook_snapshot_name(self):
        """Gets the runbook_snapshot_name of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The runbook_snapshot_name of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._runbook_snapshot_name

    @runbook_snapshot_name.setter
    def runbook_snapshot_name(self, runbook_snapshot_name):
        """Sets the runbook_snapshot_name of this RunbooksDashboardItemResource.


        :param runbook_snapshot_name: The runbook_snapshot_name of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._runbook_snapshot_name = runbook_snapshot_name

    @property
    def runbook_snapshot_notes(self):
        """Gets the runbook_snapshot_notes of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The runbook_snapshot_notes of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._runbook_snapshot_notes

    @runbook_snapshot_notes.setter
    def runbook_snapshot_notes(self, runbook_snapshot_notes):
        """Sets the runbook_snapshot_notes of this RunbooksDashboardItemResource.


        :param runbook_snapshot_notes: The runbook_snapshot_notes of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._runbook_snapshot_notes = runbook_snapshot_notes

    @property
    def run_by(self):
        """Gets the run_by of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The run_by of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._run_by

    @run_by.setter
    def run_by(self, run_by):
        """Sets the run_by of this RunbooksDashboardItemResource.


        :param run_by: The run_by of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._run_by = run_by

    @property
    def runbook_id(self):
        """Gets the runbook_id of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The runbook_id of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._runbook_id

    @runbook_id.setter
    def runbook_id(self, runbook_id):
        """Sets the runbook_id of this RunbooksDashboardItemResource.


        :param runbook_id: The runbook_id of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._runbook_id = runbook_id

    @property
    def task_id(self):
        """Gets the task_id of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The task_id of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """Sets the task_id of this RunbooksDashboardItemResource.


        :param task_id: The task_id of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._task_id = task_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The tenant_id of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RunbooksDashboardItemResource.


        :param tenant_id: The tenant_id of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def created(self):
        """Gets the created of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The created of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this RunbooksDashboardItemResource.


        :param created: The created of this RunbooksDashboardItemResource.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def queue_time(self):
        """Gets the queue_time of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The queue_time of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: datetime
        """
        return self._queue_time

    @queue_time.setter
    def queue_time(self, queue_time):
        """Sets the queue_time of this RunbooksDashboardItemResource.


        :param queue_time: The queue_time of this RunbooksDashboardItemResource.  # noqa: E501
        :type: datetime
        """

        self._queue_time = queue_time

    @property
    def start_time(self):
        """Gets the start_time of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The start_time of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this RunbooksDashboardItemResource.


        :param start_time: The start_time of this RunbooksDashboardItemResource.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def completed_time(self):
        """Gets the completed_time of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The completed_time of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_time

    @completed_time.setter
    def completed_time(self, completed_time):
        """Sets the completed_time of this RunbooksDashboardItemResource.


        :param completed_time: The completed_time of this RunbooksDashboardItemResource.  # noqa: E501
        :type: datetime
        """

        self._completed_time = completed_time

    @property
    def state(self):
        """Gets the state of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The state of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this RunbooksDashboardItemResource.


        :param state: The state of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """
        allowed_values = ["Queued", "Executing", "Failed", "Canceled", "TimedOut", "Success", "Cancelling"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def has_pending_interruptions(self):
        """Gets the has_pending_interruptions of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The has_pending_interruptions of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: bool
        """
        return self._has_pending_interruptions

    @has_pending_interruptions.setter
    def has_pending_interruptions(self, has_pending_interruptions):
        """Sets the has_pending_interruptions of this RunbooksDashboardItemResource.


        :param has_pending_interruptions: The has_pending_interruptions of this RunbooksDashboardItemResource.  # noqa: E501
        :type: bool
        """

        self._has_pending_interruptions = has_pending_interruptions

    @property
    def has_warnings_or_errors(self):
        """Gets the has_warnings_or_errors of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The has_warnings_or_errors of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: bool
        """
        return self._has_warnings_or_errors

    @has_warnings_or_errors.setter
    def has_warnings_or_errors(self, has_warnings_or_errors):
        """Sets the has_warnings_or_errors of this RunbooksDashboardItemResource.


        :param has_warnings_or_errors: The has_warnings_or_errors of this RunbooksDashboardItemResource.  # noqa: E501
        :type: bool
        """

        self._has_warnings_or_errors = has_warnings_or_errors

    @property
    def error_message(self):
        """Gets the error_message of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The error_message of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this RunbooksDashboardItemResource.


        :param error_message: The error_message of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def duration(self):
        """Gets the duration of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The duration of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RunbooksDashboardItemResource.


        :param duration: The duration of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._duration = duration

    @property
    def is_completed(self):
        """Gets the is_completed of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The is_completed of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: bool
        """
        return self._is_completed

    @is_completed.setter
    def is_completed(self, is_completed):
        """Sets the is_completed of this RunbooksDashboardItemResource.


        :param is_completed: The is_completed of this RunbooksDashboardItemResource.  # noqa: E501
        :type: bool
        """

        self._is_completed = is_completed

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The last_modified_on of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this RunbooksDashboardItemResource.


        :param last_modified_on: The last_modified_on of this RunbooksDashboardItemResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The last_modified_by of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this RunbooksDashboardItemResource.


        :param last_modified_by: The last_modified_by of this RunbooksDashboardItemResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this RunbooksDashboardItemResource.  # noqa: E501


        :return: The links of this RunbooksDashboardItemResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RunbooksDashboardItemResource.


        :param links: The links of this RunbooksDashboardItemResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunbooksDashboardItemResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunbooksDashboardItemResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
