# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.13.4+Branch.tags-2019.13.4.Sha.0d7b19b0ef3b9f74ec58e5c86ae6af95165ef70e
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class WorkerPoolSummaryResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'worker_pool': 'WorkerPoolResource',
        'total_machines': 'int',
        'total_disabled_machines': 'int',
        'machine_health_status_summaries': 'dict(str, int)',
        'machine_endpoint_summaries': 'dict(str, int)',
        'tentacle_upgrades_required': 'bool',
        'machine_ids_for_calamari_upgrade': 'list[str]',
        'machine_ids_for_tentacle_upgrade': 'list[str]'
    }

    attribute_map = {
        'worker_pool': 'WorkerPool',
        'total_machines': 'TotalMachines',
        'total_disabled_machines': 'TotalDisabledMachines',
        'machine_health_status_summaries': 'MachineHealthStatusSummaries',
        'machine_endpoint_summaries': 'MachineEndpointSummaries',
        'tentacle_upgrades_required': 'TentacleUpgradesRequired',
        'machine_ids_for_calamari_upgrade': 'MachineIdsForCalamariUpgrade',
        'machine_ids_for_tentacle_upgrade': 'MachineIdsForTentacleUpgrade'
    }

    def __init__(self, worker_pool=None, total_machines=None, total_disabled_machines=None, machine_health_status_summaries=None, machine_endpoint_summaries=None, tentacle_upgrades_required=None, machine_ids_for_calamari_upgrade=None, machine_ids_for_tentacle_upgrade=None):  # noqa: E501
        """WorkerPoolSummaryResource - a model defined in Swagger"""  # noqa: E501
        self._worker_pool = None
        self._total_machines = None
        self._total_disabled_machines = None
        self._machine_health_status_summaries = None
        self._machine_endpoint_summaries = None
        self._tentacle_upgrades_required = None
        self._machine_ids_for_calamari_upgrade = None
        self._machine_ids_for_tentacle_upgrade = None
        self.discriminator = None
        if worker_pool is not None:
            self.worker_pool = worker_pool
        if total_machines is not None:
            self.total_machines = total_machines
        if total_disabled_machines is not None:
            self.total_disabled_machines = total_disabled_machines
        if machine_health_status_summaries is not None:
            self.machine_health_status_summaries = machine_health_status_summaries
        if machine_endpoint_summaries is not None:
            self.machine_endpoint_summaries = machine_endpoint_summaries
        if tentacle_upgrades_required is not None:
            self.tentacle_upgrades_required = tentacle_upgrades_required
        if machine_ids_for_calamari_upgrade is not None:
            self.machine_ids_for_calamari_upgrade = machine_ids_for_calamari_upgrade
        if machine_ids_for_tentacle_upgrade is not None:
            self.machine_ids_for_tentacle_upgrade = machine_ids_for_tentacle_upgrade

    @property
    def worker_pool(self):
        """Gets the worker_pool of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The worker_pool of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: WorkerPoolResource
        """
        return self._worker_pool

    @worker_pool.setter
    def worker_pool(self, worker_pool):
        """Sets the worker_pool of this WorkerPoolSummaryResource.


        :param worker_pool: The worker_pool of this WorkerPoolSummaryResource.  # noqa: E501
        :type: WorkerPoolResource
        """

        self._worker_pool = worker_pool

    @property
    def total_machines(self):
        """Gets the total_machines of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The total_machines of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: int
        """
        return self._total_machines

    @total_machines.setter
    def total_machines(self, total_machines):
        """Sets the total_machines of this WorkerPoolSummaryResource.


        :param total_machines: The total_machines of this WorkerPoolSummaryResource.  # noqa: E501
        :type: int
        """

        self._total_machines = total_machines

    @property
    def total_disabled_machines(self):
        """Gets the total_disabled_machines of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The total_disabled_machines of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: int
        """
        return self._total_disabled_machines

    @total_disabled_machines.setter
    def total_disabled_machines(self, total_disabled_machines):
        """Sets the total_disabled_machines of this WorkerPoolSummaryResource.


        :param total_disabled_machines: The total_disabled_machines of this WorkerPoolSummaryResource.  # noqa: E501
        :type: int
        """

        self._total_disabled_machines = total_disabled_machines

    @property
    def machine_health_status_summaries(self):
        """Gets the machine_health_status_summaries of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The machine_health_status_summaries of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._machine_health_status_summaries

    @machine_health_status_summaries.setter
    def machine_health_status_summaries(self, machine_health_status_summaries):
        """Sets the machine_health_status_summaries of this WorkerPoolSummaryResource.


        :param machine_health_status_summaries: The machine_health_status_summaries of this WorkerPoolSummaryResource.  # noqa: E501
        :type: dict(str, int)
        """

        self._machine_health_status_summaries = machine_health_status_summaries

    @property
    def machine_endpoint_summaries(self):
        """Gets the machine_endpoint_summaries of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The machine_endpoint_summaries of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._machine_endpoint_summaries

    @machine_endpoint_summaries.setter
    def machine_endpoint_summaries(self, machine_endpoint_summaries):
        """Sets the machine_endpoint_summaries of this WorkerPoolSummaryResource.


        :param machine_endpoint_summaries: The machine_endpoint_summaries of this WorkerPoolSummaryResource.  # noqa: E501
        :type: dict(str, int)
        """

        self._machine_endpoint_summaries = machine_endpoint_summaries

    @property
    def tentacle_upgrades_required(self):
        """Gets the tentacle_upgrades_required of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The tentacle_upgrades_required of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: bool
        """
        return self._tentacle_upgrades_required

    @tentacle_upgrades_required.setter
    def tentacle_upgrades_required(self, tentacle_upgrades_required):
        """Sets the tentacle_upgrades_required of this WorkerPoolSummaryResource.


        :param tentacle_upgrades_required: The tentacle_upgrades_required of this WorkerPoolSummaryResource.  # noqa: E501
        :type: bool
        """

        self._tentacle_upgrades_required = tentacle_upgrades_required

    @property
    def machine_ids_for_calamari_upgrade(self):
        """Gets the machine_ids_for_calamari_upgrade of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The machine_ids_for_calamari_upgrade of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._machine_ids_for_calamari_upgrade

    @machine_ids_for_calamari_upgrade.setter
    def machine_ids_for_calamari_upgrade(self, machine_ids_for_calamari_upgrade):
        """Sets the machine_ids_for_calamari_upgrade of this WorkerPoolSummaryResource.


        :param machine_ids_for_calamari_upgrade: The machine_ids_for_calamari_upgrade of this WorkerPoolSummaryResource.  # noqa: E501
        :type: list[str]
        """

        self._machine_ids_for_calamari_upgrade = machine_ids_for_calamari_upgrade

    @property
    def machine_ids_for_tentacle_upgrade(self):
        """Gets the machine_ids_for_tentacle_upgrade of this WorkerPoolSummaryResource.  # noqa: E501


        :return: The machine_ids_for_tentacle_upgrade of this WorkerPoolSummaryResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._machine_ids_for_tentacle_upgrade

    @machine_ids_for_tentacle_upgrade.setter
    def machine_ids_for_tentacle_upgrade(self, machine_ids_for_tentacle_upgrade):
        """Sets the machine_ids_for_tentacle_upgrade of this WorkerPoolSummaryResource.


        :param machine_ids_for_tentacle_upgrade: The machine_ids_for_tentacle_upgrade of this WorkerPoolSummaryResource.  # noqa: E501
        :type: list[str]
        """

        self._machine_ids_for_tentacle_upgrade = machine_ids_for_tentacle_upgrade

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkerPoolSummaryResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkerPoolSummaryResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
