# coding: utf-8

"""
    Octopus Server API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 2019.13.4+Branch.tags-2019.13.4.Sha.0d7b19b0ef3b9f74ec58e5c86ae6af95165ef70e
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RunbookSnapshotResource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'runbook_id': 'str',
        'notes': 'str',
        'frozen_runbook_process_id': 'str',
        'frozen_project_variable_set_id': 'str',
        'assembled': 'datetime',
        'project_id': 'str',
        'library_variable_set_snapshot_ids': 'list[str]',
        'selected_packages': 'list[SelectedPackage]',
        'project_variable_set_snapshot_id': 'str',
        'space_id': 'str',
        'last_modified_on': 'datetime',
        'last_modified_by': 'str',
        'links': 'dict(str, str)'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'runbook_id': 'RunbookId',
        'notes': 'Notes',
        'frozen_runbook_process_id': 'FrozenRunbookProcessId',
        'frozen_project_variable_set_id': 'FrozenProjectVariableSetId',
        'assembled': 'Assembled',
        'project_id': 'ProjectId',
        'library_variable_set_snapshot_ids': 'LibraryVariableSetSnapshotIds',
        'selected_packages': 'SelectedPackages',
        'project_variable_set_snapshot_id': 'ProjectVariableSetSnapshotId',
        'space_id': 'SpaceId',
        'last_modified_on': 'LastModifiedOn',
        'last_modified_by': 'LastModifiedBy',
        'links': 'Links'
    }

    def __init__(self, id=None, name=None, runbook_id=None, notes=None, frozen_runbook_process_id=None, frozen_project_variable_set_id=None, assembled=None, project_id=None, library_variable_set_snapshot_ids=None, selected_packages=None, project_variable_set_snapshot_id=None, space_id=None, last_modified_on=None, last_modified_by=None, links=None):  # noqa: E501
        """RunbookSnapshotResource - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._runbook_id = None
        self._notes = None
        self._frozen_runbook_process_id = None
        self._frozen_project_variable_set_id = None
        self._assembled = None
        self._project_id = None
        self._library_variable_set_snapshot_ids = None
        self._selected_packages = None
        self._project_variable_set_snapshot_id = None
        self._space_id = None
        self._last_modified_on = None
        self._last_modified_by = None
        self._links = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if runbook_id is not None:
            self.runbook_id = runbook_id
        if notes is not None:
            self.notes = notes
        if frozen_runbook_process_id is not None:
            self.frozen_runbook_process_id = frozen_runbook_process_id
        if frozen_project_variable_set_id is not None:
            self.frozen_project_variable_set_id = frozen_project_variable_set_id
        if assembled is not None:
            self.assembled = assembled
        if project_id is not None:
            self.project_id = project_id
        if library_variable_set_snapshot_ids is not None:
            self.library_variable_set_snapshot_ids = library_variable_set_snapshot_ids
        if selected_packages is not None:
            self.selected_packages = selected_packages
        if project_variable_set_snapshot_id is not None:
            self.project_variable_set_snapshot_id = project_variable_set_snapshot_id
        if space_id is not None:
            self.space_id = space_id
        if last_modified_on is not None:
            self.last_modified_on = last_modified_on
        if last_modified_by is not None:
            self.last_modified_by = last_modified_by
        if links is not None:
            self.links = links

    @property
    def id(self):
        """Gets the id of this RunbookSnapshotResource.  # noqa: E501


        :return: The id of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RunbookSnapshotResource.


        :param id: The id of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this RunbookSnapshotResource.  # noqa: E501


        :return: The name of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RunbookSnapshotResource.


        :param name: The name of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def runbook_id(self):
        """Gets the runbook_id of this RunbookSnapshotResource.  # noqa: E501


        :return: The runbook_id of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._runbook_id

    @runbook_id.setter
    def runbook_id(self, runbook_id):
        """Sets the runbook_id of this RunbookSnapshotResource.


        :param runbook_id: The runbook_id of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._runbook_id = runbook_id

    @property
    def notes(self):
        """Gets the notes of this RunbookSnapshotResource.  # noqa: E501


        :return: The notes of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this RunbookSnapshotResource.


        :param notes: The notes of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def frozen_runbook_process_id(self):
        """Gets the frozen_runbook_process_id of this RunbookSnapshotResource.  # noqa: E501


        :return: The frozen_runbook_process_id of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._frozen_runbook_process_id

    @frozen_runbook_process_id.setter
    def frozen_runbook_process_id(self, frozen_runbook_process_id):
        """Sets the frozen_runbook_process_id of this RunbookSnapshotResource.


        :param frozen_runbook_process_id: The frozen_runbook_process_id of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._frozen_runbook_process_id = frozen_runbook_process_id

    @property
    def frozen_project_variable_set_id(self):
        """Gets the frozen_project_variable_set_id of this RunbookSnapshotResource.  # noqa: E501


        :return: The frozen_project_variable_set_id of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._frozen_project_variable_set_id

    @frozen_project_variable_set_id.setter
    def frozen_project_variable_set_id(self, frozen_project_variable_set_id):
        """Sets the frozen_project_variable_set_id of this RunbookSnapshotResource.


        :param frozen_project_variable_set_id: The frozen_project_variable_set_id of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._frozen_project_variable_set_id = frozen_project_variable_set_id

    @property
    def assembled(self):
        """Gets the assembled of this RunbookSnapshotResource.  # noqa: E501


        :return: The assembled of this RunbookSnapshotResource.  # noqa: E501
        :rtype: datetime
        """
        return self._assembled

    @assembled.setter
    def assembled(self, assembled):
        """Sets the assembled of this RunbookSnapshotResource.


        :param assembled: The assembled of this RunbookSnapshotResource.  # noqa: E501
        :type: datetime
        """

        self._assembled = assembled

    @property
    def project_id(self):
        """Gets the project_id of this RunbookSnapshotResource.  # noqa: E501


        :return: The project_id of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this RunbookSnapshotResource.


        :param project_id: The project_id of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._project_id = project_id

    @property
    def library_variable_set_snapshot_ids(self):
        """Gets the library_variable_set_snapshot_ids of this RunbookSnapshotResource.  # noqa: E501


        :return: The library_variable_set_snapshot_ids of this RunbookSnapshotResource.  # noqa: E501
        :rtype: list[str]
        """
        return self._library_variable_set_snapshot_ids

    @library_variable_set_snapshot_ids.setter
    def library_variable_set_snapshot_ids(self, library_variable_set_snapshot_ids):
        """Sets the library_variable_set_snapshot_ids of this RunbookSnapshotResource.


        :param library_variable_set_snapshot_ids: The library_variable_set_snapshot_ids of this RunbookSnapshotResource.  # noqa: E501
        :type: list[str]
        """

        self._library_variable_set_snapshot_ids = library_variable_set_snapshot_ids

    @property
    def selected_packages(self):
        """Gets the selected_packages of this RunbookSnapshotResource.  # noqa: E501


        :return: The selected_packages of this RunbookSnapshotResource.  # noqa: E501
        :rtype: list[SelectedPackage]
        """
        return self._selected_packages

    @selected_packages.setter
    def selected_packages(self, selected_packages):
        """Sets the selected_packages of this RunbookSnapshotResource.


        :param selected_packages: The selected_packages of this RunbookSnapshotResource.  # noqa: E501
        :type: list[SelectedPackage]
        """

        self._selected_packages = selected_packages

    @property
    def project_variable_set_snapshot_id(self):
        """Gets the project_variable_set_snapshot_id of this RunbookSnapshotResource.  # noqa: E501


        :return: The project_variable_set_snapshot_id of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._project_variable_set_snapshot_id

    @project_variable_set_snapshot_id.setter
    def project_variable_set_snapshot_id(self, project_variable_set_snapshot_id):
        """Sets the project_variable_set_snapshot_id of this RunbookSnapshotResource.


        :param project_variable_set_snapshot_id: The project_variable_set_snapshot_id of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._project_variable_set_snapshot_id = project_variable_set_snapshot_id

    @property
    def space_id(self):
        """Gets the space_id of this RunbookSnapshotResource.  # noqa: E501


        :return: The space_id of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._space_id

    @space_id.setter
    def space_id(self, space_id):
        """Sets the space_id of this RunbookSnapshotResource.


        :param space_id: The space_id of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._space_id = space_id

    @property
    def last_modified_on(self):
        """Gets the last_modified_on of this RunbookSnapshotResource.  # noqa: E501


        :return: The last_modified_on of this RunbookSnapshotResource.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_on

    @last_modified_on.setter
    def last_modified_on(self, last_modified_on):
        """Sets the last_modified_on of this RunbookSnapshotResource.


        :param last_modified_on: The last_modified_on of this RunbookSnapshotResource.  # noqa: E501
        :type: datetime
        """

        self._last_modified_on = last_modified_on

    @property
    def last_modified_by(self):
        """Gets the last_modified_by of this RunbookSnapshotResource.  # noqa: E501


        :return: The last_modified_by of this RunbookSnapshotResource.  # noqa: E501
        :rtype: str
        """
        return self._last_modified_by

    @last_modified_by.setter
    def last_modified_by(self, last_modified_by):
        """Sets the last_modified_by of this RunbookSnapshotResource.


        :param last_modified_by: The last_modified_by of this RunbookSnapshotResource.  # noqa: E501
        :type: str
        """

        self._last_modified_by = last_modified_by

    @property
    def links(self):
        """Gets the links of this RunbookSnapshotResource.  # noqa: E501


        :return: The links of this RunbookSnapshotResource.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this RunbookSnapshotResource.


        :param links: The links of this RunbookSnapshotResource.  # noqa: E501
        :type: dict(str, str)
        """

        self._links = links

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RunbookSnapshotResource, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RunbookSnapshotResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
